{"ast":null,"code":"var _jsxFileName = \"/Users/eleanorkelman/Desktop/Phase-2-React-Router/src/components/PD_FETCH.js\";\nimport React, { useState } from \"react\";\nimport EachPD from \"./EachPD\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction PD_FETCH(_ref) {\n  let {\n    animals,\n    setAnimals\n  } = _ref;\n  function handleDelete(id) {\n    fetch(`http://localhost:3000/animals/${id}`, {\n      method: \"DELETE\"\n    }).then(resp => resp.json()).then(() => {\n      const updatedAnimals = animals.filter(animal => animal.id != id);\n      setAnimals(updatedAnimals);\n    });\n  }\n  function handlePatch(id, newName) {\n    fetch(`http://localhost:3000/animals/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: newName\n      })\n    }).then(resp => resp.json()).then(patchedAnimal => {\n      const updatedAnimals = animals.map(animal => {\n        if (animal.id == id) {\n          return patchedAnimal;\n        }\n        return animal;\n      });\n      setAnimals(updatedAnimals);\n    });\n  }\n  const mappedAnimals = animals.map(animal => /*#__PURE__*/_jsxDEV(EachPD, {\n    id: animal.id,\n    species: animal.species,\n    name: animal.name,\n    handlePatch: handlePatch,\n    handleDelete: handleDelete\n  }, animal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: mappedAnimals\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c = PD_FETCH;\nexport default PD_FETCH;\nvar _c;\n$RefreshReg$(_c, \"PD_FETCH\");","map":{"version":3,"names":["React","useState","EachPD","jsxDEV","_jsxDEV","Fragment","_Fragment","PD_FETCH","_ref","animals","setAnimals","handleDelete","id","fetch","method","then","resp","json","updatedAnimals","filter","animal","handlePatch","newName","headers","body","JSON","stringify","name","patchedAnimal","map","mappedAnimals","species","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/Users/eleanorkelman/Desktop/Phase-2-React-Router/src/components/PD_FETCH.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport EachPD from \"./EachPD\";\n\nfunction PD_FETCH( { animals, setAnimals } ) {\n\n    function handleDelete(id) {\n        fetch(`http://localhost:3000/animals/${id}`, {\n          method: \"DELETE\",\n        })\n            .then((resp) => resp.json())\n            .then(() => {\n                const updatedAnimals = animals.filter((animal) => animal.id != id);\n                setAnimals(updatedAnimals);\n            })\n        }\n\n        function handlePatch(id, newName) {\n            fetch(`http://localhost:3000/animals/${id}`, {\n                method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ name: newName }),\n            })\n            .then((resp) => resp.json())\n            .then((patchedAnimal) => {\n                const updatedAnimals = animals.map((animal) => {\n                    if (animal.id == id) {\n                        return patchedAnimal\n                    }\n                    return animal\n                });\n                setAnimals(updatedAnimals);\n            })\n        }\n\n    const mappedAnimals = animals.map((animal) => (\n        <EachPD\n            key = {animal.id}\n            id = {animal.id}\n            species = {animal.species}\n            name = {animal.name}\n            handlePatch = {handlePatch}\n            handleDelete = {handleDelete}\n        />\n    ))\n\n    return (\n        <>\n            <ul>\n                {mappedAnimals}\n            </ul>\n        </>\n    );\n}\n\nexport default PD_FETCH;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9B,SAASC,QAAQA,CAAAC,IAAA,EAA4B;EAAA,IAA1B;IAAEC,OAAO;IAAEC;EAAW,CAAC,GAAAF,IAAA;EAEtC,SAASG,YAAYA,CAACC,EAAE,EAAE;IACtBC,KAAK,CAAE,iCAAgCD,EAAG,EAAC,EAAE;MAC3CE,MAAM,EAAE;IACV,CAAC,CAAC,CACGC,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAC3BF,IAAI,CAAC,MAAM;MACR,MAAMG,cAAc,GAAGT,OAAO,CAACU,MAAM,CAAEC,MAAM,IAAKA,MAAM,CAACR,EAAE,IAAIA,EAAE,CAAC;MAClEF,UAAU,CAACQ,cAAc,CAAC;IAC9B,CAAC,CAAC;EACN;EAEA,SAASG,WAAWA,CAACT,EAAE,EAAEU,OAAO,EAAE;IAC9BT,KAAK,CAAE,iCAAgCD,EAAG,EAAC,EAAE;MACzCE,MAAM,EAAE,OAAO;MACnBS,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,IAAI,EAAEL;MAAQ,CAAC;IACtC,CAAC,CAAC,CACDP,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAC3BF,IAAI,CAAEa,aAAa,IAAK;MACrB,MAAMV,cAAc,GAAGT,OAAO,CAACoB,GAAG,CAAET,MAAM,IAAK;QAC3C,IAAIA,MAAM,CAACR,EAAE,IAAIA,EAAE,EAAE;UACjB,OAAOgB,aAAa;QACxB;QACA,OAAOR,MAAM;MACjB,CAAC,CAAC;MACFV,UAAU,CAACQ,cAAc,CAAC;IAC9B,CAAC,CAAC;EACN;EAEJ,MAAMY,aAAa,GAAGrB,OAAO,CAACoB,GAAG,CAAET,MAAM,iBACrChB,OAAA,CAACF,MAAM;IAEHU,EAAE,EAAIQ,MAAM,CAACR,EAAG;IAChBmB,OAAO,EAAIX,MAAM,CAACW,OAAQ;IAC1BJ,IAAI,EAAIP,MAAM,CAACO,IAAK;IACpBN,WAAW,EAAIA,WAAY;IAC3BV,YAAY,EAAIA;EAAa,GALtBS,MAAM,CAACR,EAAE;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAMnB,CACJ,CAAC;EAEF,oBACI/B,OAAA,CAAAE,SAAA;IAAA8B,QAAA,eACIhC,OAAA;MAAAgC,QAAA,EACKN;IAAa;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd;EAAC,gBACP,CAAC;AAEX;AAACE,EAAA,GAnDQ9B,QAAQ;AAqDjB,eAAeA,QAAQ;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}